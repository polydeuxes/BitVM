from circuit import op
from bfcl import circuit, gate, operation

#Implementation of a 2-bit Adder

import circuit as circuit_
c = circuit_.circuit()                      

a1 = c.gate(op.id_, is_input=True)
a0 = c.gate(op.id_, is_input=True)
b1 = c.gate(op.id_, is_input=True)
b0 = c.gate(op.id_, is_input=True)
c0 = c.gate(op.id_, is_input=True)

g0 = c.gate(op.xor_, [a0, b0])
g1 = c.gate(op.and_, [a0, b0])
g2 = c.gate(op.and_, [g0, c0])
g3 = c.gate(op.xor_, [c0, g0])
g4 = c.gate(op.or_, [g1, g2])
g5 = c.gate(op.xor_, [a1, b1])
g6 = c.gate(op.and_, [a1, b1])
g7 = c.gate(op.and_, [g5, g4])
g8 = c.gate(op.xor_, [g4, g5])
g9 = c.gate(op.or_, [g6, g7])

c1 = c.gate(op.id_, [g9], is_output=True)
s1 = c.gate(op.id_, [g8], is_output=True)
s0 = c.gate(op.id_, [g3], is_output=True)

print(c.evaluate([0,0,0,0,1]))

matrix = [[i, j, k, l, m] for i in range(2) for j in range(2) for k in range(2) for l in range(2) for m in range(2)]


for i in matrix:
    print(c.evaluate(list(i)))

#Output in Bristol Fashion
circuit(c).emit().split('\n')
