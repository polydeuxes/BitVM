```python
from circuit import op
from bfcl import circuit, gate, operation
```


```python
#Implementation of the Full Adder
import circuit as circuit_
c = circuit_.circuit()

n_bits = 16  # Change this to set the bit width

# Create lists to hold the gates
g_and = []
g_xor = []
g_or = []

inputs = [c.gate(op.id_, is_input=True) for _ in range(2 * n_bits + 1)]

for i in range(n_bits):
    a = inputs[i]
    b = inputs[i + n_bits]
    c_in = inputs[2 * n_bits]

    xor_gate = c.gate(op.xor_, [a, b])
    and_gate1 = c.gate(op.and_, [a, b])
    and_gate2 = c.gate(op.and_, [xor_gate, c_in])
    xor_gate2 = c.gate(op.xor_, [xor_gate, c_in])
    or_gate = c.gate(op.or_, [and_gate1, and_gate2])

    g_xor.append(xor_gate)
    g_and.extend([and_gate1, and_gate2])
    g_xor.append(xor_gate2)
    g_or.append(or_gate)

# The gates lists now hold the gates for the n-bit adder

carry_out = c.gate(op.id_, [g_or[-1]], is_output=True)
results = [c.gate(op.id_, [g_xor[i-1]], is_output=True) for i in range(n_bits)]

```


```python
# Define the inputs with n_bits
input_values = [0] * (2 * n_bits + 1)  # Initialize with zeros
input_values[0] = 1  # Set the carry input (C) to 1 if needed

# Evaluate the adder with the input values
output_values = c.evaluate(input_values)

# Print the output values
print(output_values)
```

    [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]



```python
# Calculate the number of input combinations
num_combinations = 2 ** n_bits

# Create a list of input combinations
inputs = [[(num_combinations >> i) & 1 for i in range(n_bits)]]

# Evaluate the circuit for each input and print the results
for input_values in inputs:
    print(f"Input: {input_values}")
    print(f"Output: {output_values}")
```

    Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    Output: [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]



```python
#Output in Bristol Fashion
circuit(c).emit().split('\n')
```




    ['97 130',
     '1 33',
     '1 40',
     '2 1 0 16 33 XOR',
     '2 1 0 16 34 AND',
     '2 1 33 32 35 AND',
     '2 1 33 32 36 XOR',
     '2 1 34 35 37 LOR',
     '2 1 1 17 38 XOR',
     '2 1 1 17 39 AND',
     '2 1 38 32 40 AND',
     '2 1 38 32 41 XOR',
     '2 1 39 40 42 LOR',
     '2 1 2 18 43 XOR',
     '2 1 2 18 44 AND',
     '2 1 43 32 45 AND',
     '2 1 43 32 46 XOR',
     '2 1 44 45 47 LOR',
     '2 1 3 19 48 XOR',
     '2 1 3 19 49 AND',
     '2 1 48 32 50 AND',
     '2 1 48 32 51 XOR',
     '2 1 49 50 52 LOR',
     '2 1 4 20 53 XOR',
     '2 1 4 20 54 AND',
     '2 1 53 32 55 AND',
     '2 1 53 32 56 XOR',
     '2 1 54 55 57 LOR',
     '2 1 5 21 58 XOR',
     '2 1 5 21 59 AND',
     '2 1 58 32 60 AND',
     '2 1 58 32 61 XOR',
     '2 1 59 60 62 LOR',
     '2 1 6 22 63 XOR',
     '2 1 6 22 64 AND',
     '2 1 63 32 65 AND',
     '2 1 63 32 66 XOR',
     '2 1 64 65 67 LOR',
     '2 1 7 23 68 XOR',
     '2 1 7 23 69 AND',
     '2 1 68 32 70 AND',
     '2 1 68 32 71 XOR',
     '2 1 69 70 72 LOR',
     '2 1 8 24 73 XOR',
     '2 1 8 24 74 AND',
     '2 1 73 32 75 AND',
     '2 1 73 32 76 XOR',
     '2 1 74 75 77 LOR',
     '2 1 9 25 78 XOR',
     '2 1 9 25 79 AND',
     '2 1 78 32 80 AND',
     '2 1 78 32 81 XOR',
     '2 1 79 80 82 LOR',
     '2 1 10 26 83 XOR',
     '2 1 10 26 84 AND',
     '2 1 83 32 85 AND',
     '2 1 83 32 86 XOR',
     '2 1 84 85 87 LOR',
     '2 1 11 27 88 XOR',
     '2 1 11 27 89 AND',
     '2 1 88 32 90 AND',
     '2 1 88 32 91 XOR',
     '2 1 89 90 92 LOR',
     '2 1 12 28 93 XOR',
     '2 1 12 28 94 AND',
     '2 1 93 32 95 AND',
     '2 1 93 32 96 XOR',
     '2 1 94 95 97 LOR',
     '2 1 13 29 98 XOR',
     '2 1 13 29 99 AND',
     '2 1 98 32 100 AND',
     '2 1 98 32 101 XOR',
     '2 1 99 100 102 LOR',
     '2 1 14 30 103 XOR',
     '2 1 14 30 104 AND',
     '2 1 103 32 105 AND',
     '2 1 103 32 106 XOR',
     '2 1 104 105 107 LOR',
     '2 1 15 31 108 XOR',
     '2 1 15 31 109 AND',
     '2 1 108 32 110 AND',
     '2 1 108 32 111 XOR',
     '2 1 109 110 112 LOR',
     '1 1 112 113 LID',
     '1 1 111 114 LID',
     '1 1 33 115 LID',
     '1 1 36 116 LID',
     '1 1 38 117 LID',
     '1 1 41 118 LID',
     '1 1 43 119 LID',
     '1 1 46 120 LID',
     '1 1 48 121 LID',
     '1 1 51 122 LID',
     '1 1 53 123 LID',
     '1 1 56 124 LID',
     '1 1 58 125 LID',
     '1 1 61 126 LID',
     '1 1 63 127 LID',
     '1 1 66 128 LID',
     '1 1 68 129 LID']




```python

```
